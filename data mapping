# -*- coding: utf-8 -*-
import openpyxl
from google_map import google_map
import pandas as pd
import xlsxwriter
from openpyxl import load_workbook

load_wb = load_workbook("/Users/choi/Desktop/datamapping/ht_영국_matched_2nd_5th_3rd.xlsx")
# 시트 이름으로 불러오기
load_ws = load_wb['Sheet1']
wb = openpyxl.Workbook()
worksheet = wb.active
google_map()

def worksheet_write_sub_hotel_lat(row,data):
    cell = worksheet.cell(row,9)
    cell.value = data

def worksheet_write_sub_hotel_lng(row,data):
    cell = worksheet.cell(row,10)
    cell.value = data

def request_googlemap(sub_hotel_addr,index,sub_hotel_lat,sub_hotel_lng):
    google_map(sub_hotel_addr)
    sub_hotel_lat, sub_hotel_lng = google_map.requst_geocode()
    worksheet_write_sub_hotel_lat(index, sub_hotel_lat)
    worksheet_write_sub_hotel_lng(index, sub_hotel_lng)

for i in range(2, 11):
    sub_hotel_addr = load_ws.cell(i,3).value
    sub_hotel_lat = load_ws.cell(i, 9).value  # 각줄에 대한 city_name을 가져옴
    sub_hotel_lng = load_ws.cell(i, 10).value  # 각줄에 대한 sub_city_name을 가져옴
    hotel_lat = load_ws.cell(i, 16).value  # 각줄에 대한 sub_hotel_name을 가져옴
    hotel_lng = load_ws.cell(i, 17).value  # 각줄에 대한 hotel_name을 가져옴

    if sub_hotel_lat == None:
        request_googlemap(sub_hotel_addr,i,sub_hotel_lat,sub_hotel_lng)

    elif sub_hotel_lat != None:
        sub_hotel_lat_int = int(sub_hotel_lat)
        if len(str(sub_hotel_lat_int)) == 1:
            if sub_hotel_lng != None:
                sub_hotel_lat, sub_hotel_lng = sub_hotel_lng, sub_hotel_lat
            elif sub_hotel_lng == None:
                request_googlemap(sub_hotel_addr, i, sub_hotel_lat, sub_hotel_lng)

        elif len(str(sub_hotel_lat_int)) == 2:
            if sub_hotel_lng != None:
                pass
            elif sub_hotel_lng == None:
                request_googlemap(sub_hotel_addr, i, sub_hotel_lat, sub_hotel_lng)

#위도,경도 값을 구글지도 에서 주소로 검색하여 reasponse받아서 기존 exel파일에 비어있는 위도 경도를 채움
# 1차 위도 경도를 sub_hotel과 hotel을 비교해야함 (오차 범위내에서)
# 1차 = 2차 범위내 통과하면 이름비교 맞으면 1 틀리면 2차진행
# 2차 -1  위도 경도가 만약 틀리면 대문자를 소문자로 만들고 brute force를 사용 ( sub_hotel_addr과 hotel_addr 비교)
# 2차 -2  만약 틀리면 대문자를 소문자로 만들고 kMP를 사용
# 2차 -3  만약 틀리면 대문자를 소문자로 만들고 정규표현식을 사용
#2차 =2 2차에서 맞으면 sub_hotel_cityname와 hotel_cityname을 비교한다 맞으면 2 틀리면 0
#3차 틀리면 수기로 확인
# 1이면 정답 2이면 애매 0 이면 틀림



wb.save('/Users/choi/Desktop/test.xlsx')


# print("1" + city_name, sub_city_name)





#print(google_map.location)

#lat = google_map.lat
#lng  = google_map.lng






#worksheet_write(1,1,lat)
#worksheet_write(1,2,lng)
main.py

# -*- coding: utf-8 -*-
from datetime import datetime
import requests
import googlemaps
import pprint

class google_map:
    gmaps = googlemaps.Client(key="AIzaSyDWf4Vh-YkrsE_lsJ189I4HrKRgNGlUz0w") # 수정필요 google geocoding에 연결하기위한 hashkey
    location ="" #address
    def __init__(self, location):
        self.location = location

    @staticmethod
    def requst_geocode():
        # Geocoding an address
        #geocode_result = google_map.gmaps.geocode(google_map.location)
        #print(geocode_result)
        lat = 52.47467
        lng = -1.88342
        return lat,lng


    # JSON 파싱
    #data = response.json()
    #print(data)
    # lat, lon 추출
    #print(data['results'][0]['geometry']['location']['lat'])
    #print(data['results'][0]['geometry']['location']['lng'])
    # print() 함수 대신 pprint.pprint() 함수를 사용하는 이유는 좀 더 보기 쉽게 출력하기 위함입니다.

google_map.py
